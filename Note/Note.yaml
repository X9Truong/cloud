### Turning OS

sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
sudo systemctl disable firewalld
sudo systemctl stop firewalld
sudo systemctl disable NetworkManager
sudo systemctl stop NetworkManager

echo "net.netfilter.nf_conntrack_tcp_be_liberal = 1
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.all.arp_announce = 2
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.ip_nonlocal_bind = 1
net.ipv4.tcp_keepalive_time = 6
net.ipv4.tcp_keepalive_intvl = 3
net.ipv4.tcp_keepalive_probes = 6
net.ipv4.ip_forward = 1
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0" >> /etc/sysctl.conf
modprobe ip_conntrack
sysctl -p

* Nếu có lỗi chạy thêm lệnh : modprobe ip_conntrack
 
https://www.cyberciti.biz/faq/linux-kernel-etcsysctl-conf-security-hardening/


echo "fs.file-max=500000" >> /etc/sysctl.conf

* /etc/security/limits.conf


# End of file
* hard nofile 65536
* soft nofile 45000


* /etc/security/limits.d/20-nproc.conf


# Default limit for number of user's processes to prevent
# accidental fork bombs.
# See rhbz #432903 for reasoning.

*          soft    nproc     40000
root       soft    nproc     unlimited


* Lưu history command

touch /var/log/cmd_history
chmod 0666 /var/log/cmd_history
/etc/profile
export PROMPT_COMMAND='{ date "+[ %Y%m%d %H:%M:%S `whoami` `tty`] `history 1 | { read x cmd; echo "$cmd"; }`"; } >> /var/log/cmd_history.log'
source /etc/profile


* Cài đặt package

yum groupinstall "Development Tools" -y


Turning gitlab

* Storing Git data in an alternative directory


git_data_dirs({
  "default" => { "path" => "/mnt/nas/git-data"" }
})


gitlab_rails['backup_path'] = your_path

* Config logo

-> Admin -> Appearance

https://docs.gitlab.com/omnibus/settings/configuration.html


* Change multi line


:s/^/#

Ex: :1;10s/^/# this will comment out line 1-10

:%s/^/#/        will comment out all lines in file



Visual Mode
The other method you can use to comment out multiple lines is to use Visual Mode.

To do this, press ESC and navigate to the lines you want to comment out.

Press CTRL + V to enable Visual Mode.

Using the up and down arrow key, highlight the lines you wish to comment out.

Once you have the lines selected, press the SHIFT + I keys to enter insert mode.

Enter your command symbol, for example, # sign, and press the ESC key. Vim will comment out all the highlighted lines.


* Uncomment

:%s/^#/

* Change network


echo "Setup IP  ens34"
nmcli c modify ens34 ipv4.addresses 192.168.1.192/24
nmcli c modify ens34 ipv4.gateway 192.168.1.1
nmcli c modify ens34 ipv4.dns 8.8.8.8
nmcli c modify ens34 ipv4.method manual
nmcli con mod ens34 connection.autoconnect yes


### Note

* Remove packages

yum remove

* Update packages

yum update httpd

* List packages by yum list

yum list openssh

* Search packages by yum search

yum search firefox

* Receive information about packages 

yum info firefox

* Check update

yum check-update

yum grouplist

yum groupinstall 'MySQL Database'

yum groupremove 'DNS Name Server'

yum groupupdate 'DNS Name Server'

* Repo list active

yum repolist

yum repolist all

yum clean all

yum history list

** Download packages RPM 

yum install yum-utils -y

yumdownloader unbound

yum localinstall unbound-1.6.6-1.el7.x86_64.rpm

### Stop start daemontools


$ for x in $(cat front_iplist); do echo ==$x== ; ssh $x "" svstat /service/mysqlrouter ""; done
$ for x in $(cat front_iplist); do echo ==$x== ; ssh $x "" svc -u /service/mysqlrouter ""; done
$ for x in $(cat front_iplist); do echo ==$x== ; ssh $x "" svstat /service/mysqlrouter ""; done



### Change line 


n=$(wc -l < infile)
paste -d '' <(yes '<before>' | head -n $n) \
            infile                         \
            <(yes '</after>' | head -n $n)



<before>line 1</after>
<before>line 2</after>
<before>line 3</after>

sed 's/.*/<before> & and <after each line>/' input.txt > output.txt



s/x/y/ - thay thế x bởi y
.* - lấy toàn bộ dòng
& - nhận văn bản phù hợp

awk '{print before, $0, after}' before="<before>" after="and <after each line" input.txt > output.txt

Điều này chỉ in nội dung của biến before, $0 (dòng hiện tại) và biến after, cách nhau bởi khoảng trắng. Các biến được đặt sau biểu thức awk


:%s/.*/<before> & and <after each line>/
:wq! out.txt



ex in.txt '+%s/.*/<before> & and <after each line>/' '+wq out.txt'
vi in.txt '+%s/.*/<before> & and <after each line>/' '+wq! out.txt'



ip route get 1 | sed 's/^.*src \([^ ]*\).*$/\1/;q'
/usr/sbin/ip route get 1 | awk '{print $NF;exit}'
Get ip

 

#!/bin/bash
export BASE_DIR={{hostvars[inventory_hostname][app_folder]['BASE_DIR']}}
export APP_HOME=${BASE_DIR}/{{app_folder | default('app', true)}}
export APP_NAME={{hostvars[inventory_hostname][item]['alias_name']| default(item)}}
export APP_ID={{hostvars[inventory_hostname][item]['APP_ID']}}
export APP_IP={{ansible_ssh_host}}
export ENV={{ENVIROMENT}}
export MIN_MEMORY={{hostvars[inventory_hostname][item]['MIN_MEMORY']| default('512m')}}
export MAX_MEMORY={{hostvars[inventory_hostname][item]['MAX_MEMORY']| default('2048m')}}
export MIN_PermSize={{hostvars[inventory_hostname][item]['MIN_PermSize'] | default('64m')}}
export MAX_PermSize={{hostvars[inventory_hostname][item]['MAX_PermSize'] | default('128m')}}
export LAUNCH_TARGET="{{hostvars[inventory_hostname][item]['LAUNCH_TARGET']}}"
export APP_VERSION={{APP_VERSION}}
${APP_HOME}/bin/rack.sh $1



activemq.url=failover:({% set list= [] %}{% for item in  groups['activemq'] %}{{list.append("tcp://"+hostvars[item]["ansible_host"]+":61616")}}{%endfor%}{{list| join(',')}})

###################################################
# HA
###################################################
locker.impl=etcd

locker.etcd.retries=15
locker.etcd.timeout=16000
locker.etcd.heartbeat=2000

locker.mysql.retries=0
locker.mysql.timeout=12000
locker.mysql.heartbeat=3000

etcd.peers={% set list= [] %}{% for item in  groups['etcd'] %}{{list.append("http://"+hostvars[item]["ansible_host"]+":2379")}}{%endfor%}{{list| join(',')}}
#################################################
# Redis
#################################################
redis.common.url=redis-sentinel://{% set list= [] %}{% for item in  groups['redis'] %}{{list.append(hostvars[item]["ansible_host"]+":26379")}}{%endfor%}{{list| join(',')}}/0?master={{REDIS_MASTER_NAME}}
redis.common.password={{REDIS_ENC_PASS}}

redis.session.url=redis-sentinel://{% set list= [] %}{% for item in  groups['redis'] %}{{list.append(hostvars[item]["ansible_host"]+":26379")}}{%endfor%}{{list| join(',')}}/1?master={{REDIS_MASTER_NAME}}
redis.session.password={{REDIS_ENC_PASS}}

redis.payment.url=redis-sentinel://{% set list= [] %}{% for item in  groups['redis'] %}{{list.append(hostvars[item]["ansible_host"]+":26379")}}{%endfor%}{{list| join(',')}}/2?master={{REDIS_MASTER_NAME}}
redis.payment.password={{REDIS_ENC_PASS}}

redis.customer.url=redis-sentinel://{% set list= [] %}{% for item in  groups['redis'] %}{{list.append(hostvars[item]["ansible_host"]+":26379")}}{%endfor%}{{list| join(',')}}/3?master={{REDIS_MASTER_NAME}}
redis.customer.password={{REDIS_ENC_PASS}}

redis.wallet.url=redis-sentinel://{% set list= [] %}{% for item in  groups['redis'] %}{{list.append(hostvars[item]["ansible_host"]+":26379")}}{%endfor%}{{list| join(',')}}/4?master={{REDIS_MASTER_NAME}}
redis.wallet.password={{REDIS_ENC_PASS}}

redis.history.url=redis-sentinel://{% set list= [] %}{% for item in  groups['redis'] %}{{list.append(hostvars[item]["ansible_host"]+":26379")}}{%endfor%}{{list| join(',')}}/5?master={{REDIS_MASTER_NAME}}
redis.history.password={{REDIS_ENC_PASS}}




yum install -y httpd-tools
htpasswd -c /etc/nginx/.htpasswd nginx
cat /etc/nginx/.htpasswd
nano /etc/nginx/nginx.conf

server {
	listen       80 default_server;
	listen       [::]:80 default_server;
	server_name  _;
	root         /usr/share/nginx/html;

	auth_basic "Private Property";
	auth_basic_user_file /etc/nginx/.htpasswd;


systemctl reload nginx

* Kích hoạt mode debug docker




# vi /etc/docker/daemon.json
{
"debug": true
}

systemctl restart docker

docker info | grep -i debug.*server

tail -f /var/log/messages | grep -i docker

---
- name: filter test
  hosts: localhost
  vars: 
    
    names: [ {
        "first": "Paul",
        "last": "Thompson",
        "mobile": "+1-234-31245543",
        "ctc": "100000",
        "address": {
          "city": "LasVegas",
          "country": "USA"
        }
      },
      {
        "first": "Rod",
        "last": "Johnson",
        "mobile": "+1-584-31551209",
        "ctc": "300000",
        "address": {
          "city": "Boston",
          "country": "USA"
        }
      },
      {
        "first": "Sarav",
        "last": "AK",
        "mobile": "+919876543210",
        "ctc": "200000",
        "address": {
          "city": "Chennai",
          "country": "India"
        }
      }]
  tasks:
  
  # Map Filter only selective attributes from list of objects [{},{}]
  - name: Select and Extract only the cities 
    debug: 
      msg="{{ names | map(attribute='address') | map(attribute='city')}}"
  # using attirubtes with list of objects [{},{}] - Selecting only mobile numbers
  - name: Select and Extract only mobile numbers
    debug:
      msg: "{{ names | map(attribute='mobile') }}"
  # Select Attributes Joined with Comma in Singleline ( By Default it returns a List)
  - debug: msg={{ names | map(attribute='first') | join(',') }} 
  - debug: msg={{ names | map(attribute='last') | join(',') }} 
  # Convert the lastname to uppercase
  - debug: msg={{ names | map(attribute='last') | map('upper') }} 
  # Convert the CTC attriute to float value
  - debug: msg={{ names | map(attribute='ctc') | map('float') }}
  # Appending USD to each CTC value and print
  - debug: msg={{ names | map(attribute='ctc') | product(['USD']) | map('join',' ')}}

 

### Backup etcd 


ETCDCTL_API=3 etcdctl \
  --endpoints=https://127.0.0.1:2379 \
  --cacert=/etc/kubernetes/pki/etcd/ca.crt \
  --cert=/etc/kubernetes/pki/etcd/server.crt \
  --key=/etc/kubernetes/pki/etcd/server.key \
  snapshot save /opt/backup/etcd.db
  
Check status 

ETCDCTL_API=3 etcdctl --write-out=table snapshot status /opt/backup/etcd.db
  



### Restore etcd Using Snapshot Backup

ETCDCTL_API=3 etcdctl snapshot restore /opt/backup/etcd.db


If you want to use a specific data directory for the restore, you can add the location using the --data-dir flag as shown below.

ETCDCTL_API=3 etcdctl --data-dir /opt/etcd snapshot restore /opt/backup/etcd.db




CREATE USER 'replica'@'192.%.%.%' IDENTIFIED BY 'R3plic4$';

ALTER USER 'replica'@'192.%.%.%' IDENTIFIED WITH mysql_native_password BY 'R3plic4$';

GRANT REPLICATION SLAVE ON *.* TO 'replica'@'192.%.%.%';

CHANGE MASTER TO
MASTER_HOST='192.168.30.136',
MASTER_USER='replica' ,
MASTER_PASSWORD='R3plic4$',
MASTER_LOG_FILE='mysql-bin.000001',
MASTER_LOG_POS=157;

set GLOBAL super_read_only=1;
select @@global.read_only, @@global.super_read_only;





---
- hosts: mysql
  gather_facts: no
  tasks:
    -  debug:
#        var: hostvars[inventory_hostname]['groups']['mysql']
        var: hostvars[inventory_hostname]['groups']['mysql']
#    - name: Debug
#      debug:
#        var: hostvars
#  tasks:
#    - debug: var=ansible_host
    - debug: var=inventory_hostname
#    - debug: var=hostvars
    - name: Debug name
      shell: "ls /opt"
      register: check
      changed_when: false
      when:
#        - ansible_host == "192.168.30.136"
        - hostvars[inventory_hostname]['mode'] == "slave"
    - name: check
      debug: var=check
    - name: Debug var mode
      debug: var=hostvars[inventory_hostname]['MAX_MEMORY']
    - debug: var=hostvars[inventory_hostname]['zone']
    - debug: var=hostvars[inventory_hostname]['APP_ID']
    - debug: var=hostvars[inventory_hostname]['launch_target']

all:
  hosts:
    localhost:
      ansible_host: 127.0.0.1
  children:
    mysql:
      hosts:
        dba:
          ansible_host: 10.2.3.110
          mode: active
          MIN_MEMORY: 2048m
          MAX_MEMORY: 4096m
          zone: 1a
          APP_ID: 1
          launch_target: "bo.rate.writer.RateWriterStartup"
          APP_NAME: RateWriter
        dba2:
          ansible_host: 10.2.3.111
          mode: slave
          MIN_MEMORY: 2048m
          MAX_MEMORY: 4096m
          zone: 1b
          APP_ID: 2
          launch_target: "bo.rate.writer.RateWriterStartup"
          APP_NAME: RateWriter
    nginx:
      hosts:
        dba:
          ansible_host: 10.2.3.110
          mode: active
          APP_ID: 3
          MIN_MEMORY: 1024m
          MAX_MEMORY: 2048m
        dba2:
          ansible_host: 10.2.3.111
          mode: active
          APP_ID: 4
          MIN_MEMORY: 1024m
          MAX_MEMORY: 2048m



gg: go first line
dG : delete all line

		  

yum -y install bash-completion
echo 'source <(kubectl completion bash)' >>~/.bashrc
echo 'alias k=kubectl' >>~/.bashrc
echo 'complete -o default -F __start_kubectl k' >>~/.bashrc
exec bash





apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
  nodeName: kube-01




Commands shared in the PPT
kubectl run nginx --image=nginx   (deployment)
kubectl run nginx --image=nginx --restart=Never   (pod)
kubectl run nginx --image=nginx --restart=OnFailure   (job)  
kubectl run nginx --image=nginx  --restart=OnFailure --schedule="* * * * *" (cronJob)

kubectl run nginx -image=nginx --restart=Never --port=80 --namespace=myname --command --serviceaccount=mysa1 --env=HOSTNAME=local --labels=bu=finance,env=dev  --requests='cpu=100m,memory=256Mi' --limits='cpu=200m,memory=512Mi' --dry-run -o yaml - /bin/sh -c 'echo hello world'

kubectl run frontend --replicas=2 --labels=run=load-balancer-example --image=busybox  --port=8080
kubectl expose deployment frontend --type=NodePort --name=frontend-service --port=6262 --target-port=8080
kubectl set serviceaccount deployment frontend myuser
kubectl create service clusterip my-cs --tcp=5678:8080 --dry-run -o yaml


If you use vi you can set the config ':set expandtab' to convert any tabs into spaces.

Create new token:

kubeadm token create --print-join-command


vim join_woker_node.sh
# get the join command from the kube master
CERT_HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
| openssl rsa -pubin -outform der 2>/dev/null \
| openssl dgst -sha256 -hex \
| sed 's/^.* //')
TOKEN=$(kubeadm token list -o json | jq -r '.token' | head -1)
IP=$(kubectl get nodes -lnode-role.kubernetes.io/master -o json \
| jq -r '.items[0].status.addresses[] | select(.type=="InternalIP") | .address')
PORT=6443
echo "sudo kubeadm join $IP:$PORT \
--token=$TOKEN --discovery-token-ca-cert-hash sha256:$CERT_HASH"

vim join_woker_node.sh
read -p 'master ip address : ' ipaddr
sha_token = "$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')"
token = "$(kubeadm token list | awk '{print $1}' | sed -n '2 p')"
echo "kubeadm join $ipaddr:6443 --token=$token --discovery-token-ca-cert-hash sha256:$sha_token"



Create local repo from ISO

yum install httpd -y
systemctl start httpd
systemctl enable httpd

# mkdir -p  /mnt/disc
# mount -o loop RHEL7.9.iso /mnt/disc
If you use DVD media, you can mount like below.

# mkdir -p  /mnt/disc
# mount /dev/sr0  /mnt/disc
Copy the media.repo file from the root of the mounted directory to /etc/yum.repos.d/ and set the permissions to 0644 or another similar permissions set:

# cp /mnt/disc/media.repo /etc/yum.repos.d/rhel7dvd.repo
# chmod 644 /etc/yum.repos.d/rhel7dvd.repo


ln -s /mnt/repodata /var/www/html/repo
ln -s /mnt/Packages/ /var/www/html/repo/Packages

Edit the new repo file, changing the gpgcheck=0 setting to 1 and adding the following 3 lines

vi /etc/yum.repos.d/rhel7dvd.repo
enabled=1
baseurl=file:///mnt/disc/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
In the end, the new repo file could look like the following

[InstallMedia]
name=DVD for Red Hat Enterprise Linux 7.9 Server
mediaid=1359576196.686790
metadata_expire=-1
gpgcheck=1
cost=500
enabled=1
baseurl=file:///mnt/disc/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
Clear the cache and check whether you can get the packages list from the DVD repo

# yum clean all
# yum repolist enabled
It should look like the following if no other repository is enabled.
To avoid any corruption its recommend to disable any non-RedHat repositories.

# yum repolist enabled
Loaded plugins: product-id, search-disabled-repos, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
repo id                                                                                 repo name                                                                     
InstallMedia                                                                        Red Hat Enterprise Linux 7.9
repolist: 5,229
If no errors are returned, the following can be used to update:

# yum update

# Create labels for node:
Add Role:
kubectl label nodes <your_node> kubernetes.io/role=<your_label>
Remove Role:
kubectl label node <node name> node-role.kubernetes.io/<role name>-


You can also change the label. Just put --overwrite:

kubectl label --overwrite nodes <your_node> kubernetes.io/role=<your_new_label>

kubectl label --overwrite nodes slave-node kubernetes.io/role=worker1


Update file hosts in etc
/etc/ansible/ansible.cfg
 host_key_checking = False
---
- hosts: all
  gather_facts: no
  become_user: yes
  tasks:
  - name: Set hostname
    hostname:
      name: "{{ inventory_hostname }}"
  - name: Add Ansible inventory mappings to /etc/hosts
    blockinfile:
      path: /etc/hosts
      block: |
        {% for host in groups['all'] %}
        {{ hostvars[host].ansible_host }} {{ host }}
        {% endfor %}
      marker: ""
  - name: Set authorized key took from file
    authorized_key:
      user: root
      state: present
      key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

- Show time task ansible
#/etc/ansible/ansible.cg
[defaults]
callback_whitelist = profile_tasks


{% for host in groups['all'] %}
{{ hostvars['host']['ansible_facts']['default_ipv4']['address'] }}
{% endfor %}

---
- hosts: localhost
  gather_facts: no
  tasks:
  - name: check path folder
    copy:
      src: /tmp/ams/rw-logs/check.sh
      dest: "{{ lookup('env', 'PWD') }}"

Note:
ansible-inventory -i inventory.py --list > /tmp/inventory.json
ansible-inventory -i /opt/deploy/inventory/inventory.py /opt/deploy/inventory/hosts.yml --list
ansible -i /opt/deploy/inventory/inventory.py redis  -m debug -a "var=hostvars[groups['redis'][0]].ansible_host"


file l:
IP=$(sed -n $1'p' /etc/ip_server.txt )
if [ ! -z $IP ] ; then
   echo $IP
   ssh $IP
else
        cat -n /etc/ip_server.txt
fi

while true ; do date; lsof -s | awk '{if ($1 == "mysqld" && $9 ~ /\/mysql_tmp/) size+=$7} END {print size}'; echo "============================" ; done > size_tmp.txt
sar -d 1 86400 -p > sar.txt
while true ; do date; iostat -dx ; echo "============================" ; done > iostat.txt

#!/bin/bash
awk '{print $1,$2}' text.txt > kq
sort kq | sort -u > kq1
grep "EventTime" kq1 > kq
sed -nr 's/EventTime.(.*)$/\1/p' kq > kq1
cut -c 3- kq1


ps -ef | grep /opt/redis/src/redis-sentinel  | grep -v grep  |awk  '{print $2}' | xargs echo -e "Number of processes:"							

egrep -v "^[[:blank:]]*(#|$)" Xoa line start # or blank


find /opt/fams/fams-web-admin-1.8.15 -type f -exec md5sum '{}' \; | xargs -0 echo md5sum							
for i in **; do [[ -f "$i" ]] && md5sum "$i" >> md5sum.txt; done							

:g/foo/d - Delete all lines containing the string “foo”. It also removes line where “foo” is embedded in larger words, such as “football”.
:g!/foo/d - Delete all lines not containing the string “foo”.
:g/^#/d - Remove all comments from a Bash script. The pattern ^# means each line beginning with #.
:g/^$/d - Remove all blank lines. The pattern ^$ matches all empty lines.
:g/^\s*$/d - Remove all blank lines. Unlike the previous command, this also removes the blank lines that have zero or more whitespace characters (\s*).							

chronyc tracking
chronyc -a makestep							

https://thankinhtoc.vn/bat-mi-10-thoi-quen-giup-ban-tro-thanh-nguoi-gioi-nhat-trong-moi-linh-vuc-nganh-nghe

- name: copy files to destination
  hosts: localhost
  connection: local
  tasks:
    - block:
      - name: get properties of src.txt
        stat:
          path: files/src.txt
          checksum_algorithm: sha1
        register: src_info
      - name: copy src.txt to dest.txt
        copy:
          src: files/src.txt
          dest: files/dest.txt
          force: yes
          checksum:
        register: copy_out
      - name: Fail if copy was a failure
        fail:
          msg: "Copy failed!"
        when: src_info.stat.checksum != copy_out.checksum
      - name: Print Copy successful
        debug:
          msg: "Copy Successful!"
      tags:
        - checksum

---
- hosts: mysql
  gather_facts: no
  tasks:
    - block:
      - name: get properties 
        shell: md5sum /etc/ansible/check_network.yml
        delegate_to: localhost        
        register: src_info        
      - name: Debug md5sum
        debug:
          var: src_info.stdout.split(' ')[0]    
      - name: copy src.txt to dest.txt
        copy:
          src: /etc/ansible/check_network.yml
          dest: /tmp
          force: yes
      - name: get properties  2
        shell: md5sum /tmp/check_network.yml
        register: copy_out        
      - name: Debug md5sum 2
        debug:
          var: copy_out.stdout_lines           
      - name: Fail if copy was a failure
        fail:
          msg: "Copy failed!"
        when: src_info.stdout.split(' ')[0] != copy_out.stdout.split(' ')[0]
      - name: Print Copy successful
        debug:
          msg: "Copy Successful!"
        when: src_info.stdout.split(' ')[0] == copy_out.stdout.split(' ')[0]

---
# tasks file for test
- name: Copy file
  template: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
    - {src: 'text1', dest: '/tmp/1', mode: '0777'}
    - {src: 'text2', dest: '/tmp/2', mode: '0777'}
    - {src: 'text3', dest: '/tmp/3', mode: '0777'}
  loop_control:
    label: 
      - "{{ item.src }}"
      - "{{ item.dest }}"
      - "{{ item.mode }}"

- name: Count our fruit
  ansible.builtin.debug:
    msg: "{{ item }} with index {{ my_idx }}"
  loop:
    - apple
    - banana
    - pear
  loop_control:
    index_var: my_idx
    
- include_tasks: inner.yml
  loop:
    - 1
    - 2
    - 3
  loop_control:
    loop_var: outer_item  

ETCD – Commands (Optional)
(Optional) Additional information about ETCDCTL UtilityETCDCTL is the CLI tool used to interact with ETCD.ETCDCTL can interact with ETCD Server using 2 API versions – Version 2 and Version 3.  By default it’s set to use Version 2. Each version has different sets of commands.

For example, ETCDCTL version 2 supports the following commands:

etcdctl backup
etcdctl cluster-health
etcdctl mk
etcdctl mkdir
etcdctl set

Whereas the commands are different in version 3

etcdctl snapshot save
etcdctl endpoint health
etcdctl get
etcdctl put

To set the right version of API set the environment variable ETCDCTL_API command

export ETCDCTL_API=3

When the API version is not set, it is assumed to be set to version 2. And version 3 commands listed above don’t work. When API version is set to version 3, version 2 commands listed above don’t work.

Apart from that, you must also specify the path to certificate files so that ETCDCTL can authenticate to the ETCD API Server. The certificate files are available in the etcd-master at the following path. We discuss more about certificates in the security section of this course. So don’t worry if this looks complex:

--cacert /etc/kubernetes/pki/etcd/ca.crt
--cert /etc/kubernetes/pki/etcd/server.crt
--key /etc/kubernetes/pki/etcd/server.key

So for the commands, I showed in the previous video to work you must specify the ETCDCTL API version and path to certificate files. Below is the final form:

kubectl exec etcd-controlplane -n kube-system -- sh -c "ETCDCTL_API=3 etcdctl get / --prefix --keys-only --limit=10 --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key"

My filters Extension ublockorgin
##.videowall-endscreen
youtube.com##.html5-endscreen-content
youtube.com##.html5-endscreen
youtube.com##.ytp-ce-element



Reference (Bookmark this page for exam. It will be very handy):

https://kubernetes.io/docs/reference/kubectl/conventions/

Create an NGINX Pod

kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don’t create it(–dry-run)

kubectl run nginx --image=nginx --dry-run=client -o yaml

Create a deployment

kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run)

kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) with 4 Replicas (–replicas=4)

kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

Save it to a file, make necessary changes to the file (for example, adding more replicas) and then create the deployment.

kubectl create -f nginx-deployment.yaml

OR

In k8s version 1.19+, we can specify the –replicas option to create a deployment with 4 replicas.

kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml


Certification Tips – Imperative Commands with Kubectl
While you would be working mostly the declarative way – using definition files, imperative commands can help in getting one time tasks done quickly, as well as generate a definition template easily. This would help save considerable amount of time during your exams.

Before we begin, familiarize with the two options that can come in handy while working with the below commands:

--dry-run: By default as soon as the command is run, the resource will be created. If you simply want to test your command , use the --dry-run=client option. This will not create the resource, instead, tell you whether the resource can be created and if your command is right.

-o yaml: This will output the resource definition in YAML format on screen.

 

Use the above two in combination to generate a resource definition file quickly, that you can then modify and create resources as required, instead of creating the files from scratch.

 

POD
Create an NGINX Pod

kubectl run nginx --image=nginx

 

Generate POD Manifest YAML file (-o yaml). Don’t create it(–dry-run)

kubectl run nginx --image=nginx --dry-run=client -o yaml

 

Deployment
Create a deployment

kubectl create deployment --image=nginx nginx

 

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run)

kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

 

Generate Deployment with 4 Replicas

kubectl create deployment nginx --image=nginx --replicas=4

 

You can also scale a deployment using the kubectl scale command.

kubectl scale deployment nginx --replicas=4 

Another way to do this is to save the YAML definition to a file and modify

kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml

 

You can then update the YAML file with the replicas or any other field before creating the deployment.

 

Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml

(This will automatically use the pod’s labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml (This will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service)

 

Create a Service named nginx of type NodePort to expose pod nginx’s port 80 on port 30080 on the nodes:

kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

(This will automatically use the pod’s labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml




Article on Setting up Basic Authentication
Setup basic authentication on Kubernetes (Deprecated in 1.19)
Note: This is not recommended in a production environment. This is only for learning purposes. Also note that this approach is deprecated in Kubernetes version 1.19 and is no longer available in later releases

Follow the below instructions to configure basic authentication in a kubeadm setup.

Create a file with user details locally at /tmp/users/user-details.csv

# User File Contents
password123,user1,u0001
password123,user2,u0002
password123,user3,u0003
password123,user4,u0004
password123,user5,u0005
Edit the kube-apiserver static pod configured by kubeadm to pass in the user details. The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml

apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
      <content-hidden>
    image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3
    name: kube-apiserver
    volumeMounts:
    - mountPath: /tmp/users
      name: usr-details
      readOnly: true
  volumes:
  - hostPath:
      path: /tmp/users
      type: DirectoryOrCreate
    name: usr-details
Modify the kube-apiserver startup options to include the basic-auth file

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --authorization-mode=Node,RBAC
      <content-hidden>
    - --basic-auth-file=/tmp/users/user-details.csv
Create the necessary roles and role bindings for these users:

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

---
# This role binding allows "jane" to read pods in the "default" namespace.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: user1 # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
Once created, you may authenticate into the kube-api server using the users credentials

curl -v -k https://localhost:6443/api/v1/pods -u "user1:password123"



apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/var/www/html"
        name: mypd
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: myclaim


You never know what you can do until you try !!!
There are times to stay put, and what you want will come to you, and there are times to go out into the world and find such a thing for yourself.


sudo curl -OL https://downloads.apache.org/tomcat/tomcat-8/v8.5.69/bin/apache-tomcat-8.5.69.tar.gz
sudo tar -xvf apache-tomcat-8.5.69.tar.gz 


In case of MariaDB use below mentioned queries:

i. Login to mysql database server: - mysql -u root

and then run the following queries in it.

ii. USE mysql;

iii. UPDATE user SET password=PASSWORD('P@ssw0rd123') WHERE User='root' AND Host = 'localhost';

iv. FLUSH PRIVILEGES;


In case of MySQL use below mentioned queries:

i. Login to mysql database server: - mysql -u root -p

(enter password what you got from sudo grep 'temporary password' /var/log/mysqld.log command earlier)

and then run the following queries in it.

ii. SET PASSWORD = PASSWORD('P@ssw0rd123');

iii. FLUSH PRIVILEGES;

CREATE USER 'kk_user'@'localhost' IDENTIFIED BY 'S3cure#3214';
GRANT ALL PRIVILEGES ON kk_db.* TO 'kk_user'@'localhost';


cd into /etc/httpd/csr directory and run command: sudo openssl req -new -newkey rsa:2048 -nodes -keyout app01.key -out app01.csr to generate a CSR file.

To verify the entries we used to create a CSR, run the command:

openssl req -noout -text -in app01.csr



sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout app01.key -out app01.crt

a. Country Name = SG

b. State or Province Name = Capital Tower

c. Locality Name = CT

d. Organization Name = KodeKloud

e. Organizational Unit Name = Education

f. Common Name = app01.com

g. Email Address = admin@kodekloud.com

For your reference the certificate you created in the previous steps is at /etc/httpd/certs/app01.crt and the key is at /etc/httpd/certs/app01.key. 
The properties in the file are SSLCertificateFile and SSLCertificateKeyFile. 

To test if server is using correct certificate or not run this command and check if it returns your certificate:

echo | openssl s_client -showcerts -servername app01.com -connect app01:443 2>/dev/null | openssl x509 -inform pem


wget -q --https-only \
"https://github.com/coreos/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz"
etcd.service
ExecStart=/usr/local/bin/etcd \\
--name ${ETCD_NAME} \\
--cert-file=/etc/etcd/kubernetes.pem \\
--key-file=/etc/etcd/kubernetes-key.pem \\
--peer-cert-file=/etc/etcd/kubernetes.pem \\
--peer-key-file=/etc/etcd/kubernetes-key.pem \\
--trusted-ca-file=/etc/etcd/ca.pem \\
--peer-trusted-ca-file=/etc/etcd/ca.pem \\
--peer-client-cert-auth \\
--client-cert-auth \\
--initial-advertise-peer-urls https://${INTERNAL_IP}:2380 \\
--listen-peer-urls https://${INTERNAL_IP}:2380 \\
--listen-client-urls https://${INTERNAL_IP}:2379,https://127.0.0.1:2379 \\
--advertise-client-urls https://${INTERNAL_IP}:2379 \\
--initial-cluster-token etcd-cluster-0 \\
--initial-cluster controller-0=https://${CONTROLLER0_IP}:2380,controller-1=https://${CONTROLLER1_IP}:2380 \\
--initial-cluster-state new \\
--data-dir=/var/lib/etcd




mount /dev/cdrom /mnt

cat local.repo
[LocalRepo]
name=LocalRepository
baseurl=file:///mnt/
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

https://www.itzgeek.com/how-tos/linux/centos-how-tos/create-local-yum-repository-on-centos-7-rhel-7-using-dvd.html



Mount RHEL 8 ISO file / Installation DVD
mount -o loop rhel-8.0-x86_64-dvd.iso /mnt/
or In case you have RHEL 8 installation DVD,
mount /dev/cdrom  /mnt

cp -rp /mnt/media.repo /etc/yum.repos.d/rhel8.repo
chmod 644 /etc/yum.repos.d/rhel8.repo

vi /etc/yum.repos.d/rhel8.repo
[InstallMedia-BaseOS]
name=Red Hat Enterprise Linux 8 - BaseOS
metadata_expire=-1
gpgcheck=0
enabled=1
baseurl=file:///mnt/BaseOS/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

[InstallMedia-AppStream]
name=Red Hat Enterprise Linux 8 - AppStream
metadata_expire=-1
gpgcheck=0
enabled=1
baseurl=file:///mnt/AppStream/
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

yum clean all


https://www.tecmint.com/create-local-http-yum-dnf-repository-on-rhel-8/

https://www.linuxhelp.com/how-to-configure-mysql-master-master-replication-in-centos-7


https://redis.io/commands/info/

info keyspace


curl --silent --output /dev/null http://example.com
Also, if you want to see the HTTP code:

curl --write-out '%{http_code}' --silent --output /dev/null http://example.com


https://curl.se/docs/manpage.html







$cat employee.txt
100  Thomas  Manager    Sales       $5,000
200  Jason   Developer  Technology  $5,500
300  Sanjay  Sysadmin   Technology  $7,000
400  Nisha   Manager    Marketing   $9,500
500  Randy   DBA        Technology  $6,000

By default Awk prints every line from the file.

$ awk '{print;}' employee.txt
100  Thomas  Manager    Sales       $5,000
200  Jason   Developer  Technology  $5,500
300  Sanjay  Sysadmin   Technology  $7,000
400  Nisha   Manager    Marketing   $9,500
500  Randy   DBA        Technology  $6,000

Print the lines which matches with the pattern.

$ awk '/Thomas/,/Nisha/' employee.txt
100  Thomas  Manager    Sales       $5,000
400  Nisha   Manager    Marketing   $9,500

Print only specific field.

$ awk '{print $2,$5;}' employee.txt
Thomas $5,000
Jason $5,500
Sanjay $7,000
Nisha $9,500
Randy $6,000

$ awk '{print $2,$NF;}' employee.txt
Thomas $5,000
Jason $5,500
Sanjay $7,000
Nisha $9,500
Randy $6,000

Initialization and Final Action

Syntax: 

BEGIN { Actions}
{ACTION} # Action for everyline in a file
END { Actions }

# is for comments in Awk

$ awk 'BEGIN {print "Name\tDesignation\tDepartment\tSalary";}
> {print $2,"\t",$3,"\t",$4,"\t",$NF;}
> END{print "Report Generated\n--------------";
> }' employee.txt
Name	Designation	Department	Salary
Thomas 	 Manager 	 Sales 	         $5,000
Jason 	 Developer 	 Technology 	 $5,500
Sanjay 	 Sysadmin 	 Technology 	 $7,000
Nisha 	 Manager 	 Marketing 	 $9,500
Randy 	 DBA 	 	 Technology 	 $6,000
Report Generated
--------------

Find the employees who has employee id greater than 200

$ awk '$1 >200' employee.txt
300  Sanjay  Sysadmin   Technology  $7,000
400  Nisha   Manager    Marketing   $9,500
500  Randy   DBA        Technology  $6,000

Print the list of employees in Technology department

$ awk '$4 ~/Technology/' employee.txt
200  Jason   Developer  Technology  $5,500
300  Sanjay  Sysadmin   Technology  $7,000
500  Randy   DBA        Technology  $6,000


Print number of employees in Technology department

$ awk 'BEGIN { count=0;}
$4 ~ /Technology/ { count++; }
END { print "Number of employees in Technology Dept =",count;}' employee.txt
Number of employees in Tehcnology Dept = 3

Print the sum of fields in all lines.

$ awk '{ for (i = 1; i <= NF; i++) total = total+$i }; END { print total }'
12 23 34 45 56
34 56 23 45 23
351

Print the fields in reverse order on every line.
 
$ awk 'BEGIN{ORS="";}{ for (i=NF; i>0; i--) print $i," "; print "\n"; }' student-marks
77  84  78  2143  Jones
45  58  56  2321  Gondrol
37  38  2122  RinRao
95  97  87  2537  Edwin
47  30  2415  Dayan 
 
 
Print file content in reverse order 
 
echo -e "1\n2\n3\n4" | sed -n '1!G;h;$p'


BEGIN          {<initializations>} 
   <pattern 1> {<program actions>} 
   <pattern 2> {<program actions>} 
   ...
END            {< final actions >}

awk '
    BEGIN { print "\n>>>Start" }
    !/(login|shutdown)/ { print NR, $0 }
    END { print "<<<END\n" }
' /etc/passwd

How to list all enabled services from systemctl?

systemctl list-unit-files | grep enabled

systemctl list-unit-files --state=enabled


To see 'enabled' services including these that are still under upstart/init run:

systemctl list-unit-files --type service --state enabled,generated
To see all of the currently running services run:

systemctl list-units --type service --state running



yum install bash-completion bash-completion-extras -y

source /etc/profile.d/bash_completion.sh

source <(kubectl completion bash) # thiết lập autocomplete trong bash vào shell hiện tại, gói bash-completion nên được cài đặt trước tiên 
echo "source <(kubectl completion bash)" >> ~/.bashrc # thêm vĩnh viễn autocomplete vào trong bash shell

vim .bashrc

alias k=kubectl
complete -F __start_kubectl k


source .bashrc

Install calico 

curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml -O
kubectl apply -f calico.yaml

https://drive.google.com/uc?export=download&id=1Du79BxXiGlKNW_3uB_LAXe_qZTnI5nCY





















